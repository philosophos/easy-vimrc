"插件相关配置
" 目录 移动光标到该行字符上，按*键即可跳转到对应配置处；Ctrl+o跳转回来
"gundo_undotree
"vim_indent_guides_缩进可视化
"fswitch_接口与实现快速切换
"wildfire_快速选中结对符内的文本
"tabular_快速对齐
"ctags_基于标签的代码导航
"YouCompleteMe_基于语义的代码导航
"tagbar_标签列表
"NERDTree_工程文件浏览
"ctrlsf_vim_工程内全局查找光标所在关键字
"替换函数
"UltiSnips_模板补全
"YouCompleteMe补全菜单
"由接口快速生成实现框架
"syntastic_语法检查
"###############################################################################
"_gundo_undotree
nnoremap <Leader>ud :GundoToggle<CR>|" 调用 gundo 树
 noremap <leader>ss :mksession! my.vim<CR>|" 保存快捷键
 noremap <leader>rs :source my.vim<CR>|" 恢复快捷键

"_vim_indent_guides_缩进可视化
let g:indent_guides_enable_on_vim_startup=1         |" 随 vim 自启动
let g:indent_guides_start_level=2                   |" 从第二层开始可视化显示缩进
let g:indent_guides_guide_size=1                    |" 色块宽度
noremap <silent> <Leader>i <Plug>IndentGuidesToggle |" 快捷键 i 开/关缩进可视化

"_fswitch_接口与实现快速切换
noremap <Leader>ch :A<CR>|" *.cpp 和 *.h 间切换
noremap <Leader>sch :AS<CR>|" 子窗口中显示 *.cpp 或 *.h

"_wildfire_快速选中结对符内的文本
"noremap <SPACE> <Plug>(wildfire-fuel)
"vnoremap <S-SPACE> <Plug>(wildfire-water)
" 适用于哪些结对符
"let g:wildfire_objects = ["i'", 'i"', "i)", "i]", "i}", "i>", "ip"]

"_tabular_快速对齐
vnoremap <S-Tab> :Tabularize /
" 快速对齐,只对齐第一个逗号
" :Tabularize first_comma ==> :Tabularize /^[^,]*\zs,/r0c0l0
"AddTabularPattern first_comma /^[^,]*\zs,/r0c0l0
" 快速对齐,以多个空格为分界
" :Tabularize multiple_spaces
"AddTabularPipeline multiple_spaces / \{2,}/
"\ map(a:lines, "substitute(v:val, ' \{2,}', '  ', 'g')")
"\ | tabular#TabularizeStrings(a:lines, '  ', 'l0')

"_ctags_基于标签的代码导航
" 设置插件indexer调用ctags的参数
" Default --c++-kinds=+p+l	::Reset --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" Default --fields=+iaS 不满足YCM要求	::Reset --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"
nnoremap <Leader>tn :tnext<CR>     |" 正向遍历同名标签
nnoremap <Leader>tp :tprevious<CR> |" 反向遍历同名标签

"_YouCompleteMe_基于语义的代码导航
nnoremap <leader>jd :YcmCompleter GoToDeclaration<CR>
" 只能是 #include 或已打开的文件
nnoremap <leader>je :YcmCompleter GoToDefinition<CR>

"_tagbar_标签列表
nnoremap <Leader>tb :TagbarToggle<CR>|" 显示／隐藏标签列表子窗口的快捷键
"let tagbar_left=1      "| 0子窗口在主编辑区左边
"let tagbar_width=32    "| 40子窗口宽度
 let tagbar_sort=0      "| 0标签顺序：0-源文件先后次序;1-字母顺序
 let g:tagbar_compact=1 "| 子窗口不显示冗余帮助信息
 let g:tagbar_show_linenumbers=-1
"let g:tagbar_iconchars = ['+', '-']
 let g:tagbar_iconchars = ['▸', '▾']
" 设置 ctags 对哪些代码元素生成标签
let g:tagbar_type_cpp = {
     \ 'ctagstype' : 'c++',
     \ 'kinds'     : [
         \ 'd:macros:1',
         \ 'g:enums',
         \ 't:typedefs:0:0',
         \ 'e:enumerators:0:0',
         \ 'n:namespaces',
         \ 'c:classes',
         \ 's:structs',
         \ 'u:unions',
         \ 'f:functions',
         \ 'm:members:0:0',
         \ 'v:global:0:0',
         \ 'x:external:0:0',
         \ 'l:local:0:0'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g':'enum',
         \ 'n':'namespace',
         \ 'c':'class',
         \ 's':'struct',
         \ 'u':'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'	:'g',
         \ 'namespace'	:'n',
         \ 'class'	:'c',
         \ 'struct'	:'s',
         \ 'union'	:'u'
     \ }
\ }

"_NERDTree_工程文件浏览
nnoremap <Leader>fl :NERDTreeToggle<CR>|" 显示／隐藏工程文件子窗口的快捷键，速记：file list
"let NERDTreeCaseSensitiveSort=1
let NERDTreeChDirMode=2
let NERDTreeIgnore=['\.pyc', '\~$', '\.swo$', '\.swp$', '\.git', '\.hg', '\.svn', '\.bzr']
let NERDTreeMouseMode=2
let NERDTreeQuitOnOpen=1
let NERDTreeShowBookmarks=1
let NERDTreeShowHidden=1
let NERDTreeShowLineNumbers=1
let NERDTreeWinPos="left"
let NERDTreeWinSize=32
let NERDTreeMinimalUI=1		" NERDTree 子窗口中不显示冗余帮助信息
let NERDTreeAutoDeleteBuffer=1	" 删除文件时自动删除文件对应 buffer
"let NERDTreeKeepTreeInNewTab=1
"let g:nerdtree_tabs_open_on_gui_startup=0

"_查找
"_ctrlsf_vim_工程内全局查找光标所在关键字
" 快捷键速记法：search in project
nnoremap <Leader>sp :CtrlSF<CR>

"_替换函数。参数说明：
" confirm：是否替换前逐一确认
" wholeword：是否整词匹配
" replace：被替换字符串
function! Replace(confirm, wholeword, replace)
	wa
	let flag = ''
    if a:confirm
        let flag .= 'gec'
    else
        let flag .= 'ge'
    endif
	let search = ''
    if a:wholeword
        let search .= '\<' . escape(expand('<cword>'), '/\.*$^~[') . '\>'
    else
        let search .= expand('<cword>')
    endif
	let replace = escape(a:replace, '/\&~')
    execute 'argdo %s/' . search . '/' . replace . '/' . flag . '| update'
endfunction
nnoremap <Leader>R :call Replace(0, 0, input('Replace '.expand('<cword>').' with: '))<CR>|" 不确认、非整词
nnoremap <Leader>rwc :call Replace(1, 1, input('Replace '.expand('<cword>').' with: '))<CR>

"_UltiSnips_模板补全
let g:UltiSnipsSnippetDirectories=["mysnippets"]
let g:UltiSnipsExpandTrigger="<leader><tab>"
let g:UltiSnipsJumpForwardTrigger="<leader><tab>"
let g:UltiSnipsJumpBackwardTrigger="<leader><s-tab>"
"UltiSnips 的 tab 键与 YCM 冲突，重新设定

"_YouCompleteMe补全菜单
hi Pmenu guifg=#005f87 guibg=#EEE8D5            |" 菜单
hi PmenuSel guifg=#AFD700 guibg=#106900         |" 选中项
inoremap <leader>; <C-x><C-o>|" YCM 集成 OmniCppComplete补全引擎，设置其快捷键
set tags+=/usr/include/c++/4.8/stdcpp.tags      |" 引入 C++ 标准库tags
set completeopt-=preview                        |" 补全内容不以分割子窗口形式出现，只显示补全列表
let g:ycm_cache_omnifunc=0                      |" 禁止缓存匹配项，每次都重新生成匹配项
let g:ycm_complete_in_comments=1                |" 补全功能在注释中同样有效
let g:ycm_confirm_extra_conf=0                  |" 允许 vim 加载 .ycm_extra_conf.py文件，不再提示
let g:ycm_collect_identifiers_from_tags_files=1 |" 开启 YCM 标签补全引擎
let g:ycm_min_num_of_chars_for_completion=1     |" 从第一个键入字符就开始罗列匹配项
let g:ycm_seed_identifiers_with_syntax=1        |" 语法关键字补全
let OmniCpp_DefaultNamespaces=["_GLIBCXX_STD"]

"由接口快速生成实现框架
let g:protodefprotogetter='~/.vim/bundle/protodef/pullproto.pl'		" 设置 pullproto.pl 脚本路径
let g:disable_protodef_sorting=1	"成员函数的实现顺序与声明顺序一致

"_syntastic_语法检查
" 静态分析器 syntastic 错误标识
let g:syntastic_error_symbol = '✗'
let g:syntastic_warning_symbol = '⚠'
" 设置每次w保存后语法检查
function! ToggleErrors()
    Errors
endfunction
let g:syntastic_check_on_open=1
let g:syntastic_check_on_wq = 0
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let syntastic_loc_list_height = 5
let g:syntastic_html_tidy_ignore_errors=[" proprietary attribute \"ng-"]
au WinEnter * if &buftype ==#'quickfix' && winnr('$') == 1 | quit |endif
au WinLeave * lclose

"##############################################################################
" END OF FILE
